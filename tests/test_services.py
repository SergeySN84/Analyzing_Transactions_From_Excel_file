import json
from typing import List, Dict, Any

import pytest
from src.services import (
    analyze_top_categories,
    investment_bank,
    search_transactions,
    find_phone_transactions,
    find_person_transfers,
)


# Пример данных транзакций для тестирования
@pytest.fixture
def sample_transactions() -> List[Dict[str, Any]]:
    return [
        {
            "Дата операции": "01.03.2021 14:01:01",
            "Дата платежа": "01.03.2021",
            "Номер карты": "*7197",
            "Статус": "OK",
            "Сумма операции": "-10.00",
            "Валюта операции": "RUB",
            "Сумма платежа": "-10.00",
            "Валюта платежа": "RUB",
            "Кэшбэк": "0.00",
            "Категория": "Связь",
            "MCC": "7379",
            "Описание": "Devajs Servis.",
            "Бонусы": "0.00",
            "Кэшбэк бонус": "0.00",
            "Сумма кэшбэка": "10.00",
        },
        {
            "Дата операции": "02.08.2021 15:26:15",
            "Дата платежа": "02.08.2021",
            "Номер карты": "*7197",
            "Статус": "OK",
            "Сумма операции": "-363.95",
            "Валюта операции": "RUB",
            "Сумма платежа": "-363.95",
            "Валюта платежа": "RUB",
            "Кэшбэк": "7.00",
            "Категория": "Супермаркеты",
            "MCC": "5411",
            "Описание": "Магнит",
            "Бонусы": "0.00",
            "Кэшбэк бонус": "0.00",
            "Сумма кэшбэка": "363.95",
        },
        {
            "Дата операции": "01.12.2021 13:12:18",
            "Дата платежа": "01.12.2021",
            "Номер карты": "*7197",
            "Статус": "OK",
            "Сумма операции": "-199.00",
            "Валюта операции": "RUB",
            "Сумма платежа": "-199.00",
            "Валюта платежа": "RUB",
            "Кэшбэк": "0.00",
            "Категория": "Фастфуд",
            "MCC": "5814",
            "Описание": "Mouse Tail",
            "Бонусы": "0.00",
            "Кэшбэк бонус": "0.00",
            "Сумма кэшбэка": "199.00",
        },
        {
            "Дата операции": "01.12.2021 22:58:47",
            "Дата платежа": "02.12.2021",
            "Номер карты": "",
            "Статус": "OK",
            "Сумма операции": "-10787.28",
            "Валюта операции": "RUB",
            "Сумма платежа": "-10787.28",
            "Валюта платежа": "RUB",
            "Кэшбэк": "107.00",
            "Категория": "ЖКХ",
            "MCC": "",
            "Описание": "ЖКУ Квартира",
            "Бонусы": "0.00",
            "Кэшбэк бонус": "0.00",
            "Сумма кэшбэка": "10787.28",
        },
        {
            "Дата операции": "23.09.2020 21:11:15",
            "Дата платежа": "25.09.2020",
            "Номер карты": "*7197",
            "Статус": "OK",
            "Сумма операции": "-39.00",
            "Валюта операции": "RUB",
            "Сумма платежа": "-39.00",
            "Валюта платежа": "RUB",
            "Кэшбэк": "0.00",
            "Категория": "Супермаркеты",
            "MCC": "5411",
            "Описание": "Supermarket 101",
            "Бонусы": "0.00",
            "Кэшбэк бонус": "0.00",
            "Сумма кэшбэка": "39.00",
        },
        {
            "Дата операции": "01.12.2021 22:58:47",
            "Дата платежа": "02.12.2021",
            "Номер карты": "+7 921 11-22-33",
            "Статус": "OK",
            "Сумма операции": "-100.00",
            "Валюта операции": "RUB",
            "Сумма платежа": "-100.00",
            "Валюта платежа": "RUB",
            "Кэшбэк": "0.00",
            "Категория": "Переводы",
            "MCC": "",
            "Описание": "Валерий А.",
            "Бонусы": "0.00",
            "Кэшбэк бонус": "0.00",
            "Сумма кэшбэка": "100.00",
        },
    ]


# Тест: Анализ выгодных категорий
def test_analyze_top_categories(sample_transactions):
    result = analyze_top_categories(sample_transactions, year=2021, month=3)
    data = json.loads(result)

    assert "Связь" in data
    assert data["Связь"] == 10.0


# Тест: Инвесткопилка
def test_investment_bank(sample_transactions):
    result = investment_bank("2021-12", sample_transactions, limit=50)
    assert round(result, 2) == 61.00  # 100 → округление до 150 → 50; 199 → до 200 → 1; итого 51 + 10 = 61


# Тест: Поиск по строке
def test_search_transactions(sample_transactions):
    result = search_transactions(sample_transactions, query="магнит")
    data = json.loads(result)
    assert len(data) == 1
    assert data[0]["Описание"] == "Магнит"


# Тест: Поиск телефонов
def test_find_phone_transactions(sample_transactions):
    result = find_phone_transactions(sample_transactions)
    data = json.loads(result)
    assert len(data) == 1
    assert data[0]["Номер карты"] == "+7 921 11-22-33"


# Тест: Переводы физическим лицам
def test_find_person_transfers(sample_transactions):
    result = find_person_transfers(sample_transactions)
    data = json.loads(result)
    assert len(data) == 1
    assert data[0]["Описание"] == "Валерий А."